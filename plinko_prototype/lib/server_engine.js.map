{"version":3,"sources":["../src/server_engine.js"],"names":["CANVAS_WIDTH","CANVAS_HEIGHT","path","require","app","server","Server","io","localtunnel","engine","Engine","create","World","add","world","backgroundBodies","currentFrame","run","setInterval","update","bodies","map","id","body","label","x","Math","floor","position","y","linearVelocity","velocity","filter","b","emit","frame","Events","on","event","pairs","i","length","pair","bodyA","render","fillStyle","bodyB","tunnel","subdomain","err","console","log","url","get","req","res","__dirname","sendFile","resolve","socket","coords","chip","listen"],"mappings":"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","file":"server_engine.js","sourcesContent":["var CANVAS_WIDTH = 682\nvar CANVAS_HEIGHT = 660\n\nvar path = require('path');\nlet app = require('express')()\nlet server = require('http').Server(app)\nlet io = require('socket.io')(server)\nlet localtunnel = require('localtunnel')\n\nimport backgroundBodies from './generateWorld';\nimport generateChip from './bodies/Chip';\nimport { Engine, World, Bodies, Body, Events } from 'matter-js';\n\n// create an engine\nvar engine = Engine.create();\n\nWorld.add(engine.world, backgroundBodies)\n\nlet currentFrame = 0;\n\n// run the engine\nvar run = function() {\n  return setInterval(function() {\n      Engine.update(engine, 1000 / 60);\n      currentFrame++\n  }, 1000 / 60);\n}\n\nrun()\n\nsetInterval(() => {\n  var bodies = engine.world.bodies.map(body => {\n    return {\n      id: body.id,\n      label: body.label,\n      x: Math.floor(body.position.x),\n      y: Math.floor(body.position.y),\n      linearVelocity: body.velocity\n    }\n  }).filter(b => b.label === 'chip')\n\n  io.emit('snapshot', { frame: currentFrame, bodies })\n\n}, 1000)\n\n\nEvents.on(engine, 'collisionStart', function(event) {\n    var pairs = event.pairs;\n\n    for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i];\n\n        if (pair.bodyA.label === 'peg') {\n          pair.bodyA.render.fillStyle = pair.bodyB.render.fillStyle;\n        } else if (pair.bodyB.label === 'peg') {\n          pair.bodyB.render.fillStyle = pair.bodyA.render.fillStyle;\n        }\n    }\n});\n\n\nlet tunnel = localtunnel(3000, {subdomain: 'radioactive-kittens'},(err, tunnel) => {\n  console.log(tunnel.url)\n})\n\napp.get('/', (req, res) => {\n  console.log(__dirname + '/../dist/index.html')\n  res.sendFile(path.resolve(__dirname + '/../dist/index.html'));\n})\n\napp.get('/main.js', (req, res) => {\n  res.sendFile(path.resolve(__dirname + '/../dist/main.js'))\n})\n\n\nio.on('connection', (socket) => {\n  console.log(\"Emitted: \", currentFrame)\n  socket.emit('connection established', currentFrame)\n\n  socket.on('new chip' , function(coords) {\n    console.log('new chip received by server')\n    let chip = generateChip(coords.x, coords.y)\n    World.add(engine.world, chip.body)\n  })\n\n});\n\ntunnel.on('close', function() {\n  console.log('tunnel closed :(')\n});\n\nserver.listen(3000)\n"]}