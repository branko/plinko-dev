{"version":3,"sources":["../src/server_engine.js"],"names":["CANVAS_WIDTH","CANVAS_HEIGHT","path","require","app","server","Server","io","localtunnel","engine","Engine","create","World","add","world","backgroundBodies","currentFrame","time","run","console","log","Date","setInterval","chipQueue","forEach","body","undefined","update","TIMESTEP","bodies","filter","b","label","map","id","x","Math","floor","position","y","linearVelocity","velocity","emit","frame","SNAPSHOT_INTERVAL","Events","on","event","pairs","i","length","pair","bodyA","render","fillStyle","bodyB","remove","tunnel","subdomain","err","url","get","req","res","__dirname","sendFile","resolve","socket","chipInfo","chip","push","listen"],"mappings":";;AASA;;AACA;;;;AACA;;;;AACA;;;;AAZA,IAAIA,eAAe,GAAnB;AACA,IAAIC,gBAAgB,GAApB;;AAEA,IAAIC,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,MAAMD,QAAQ,SAAR,GAAV;AACA,IAAIE,SAASF,QAAQ,MAAR,EAAgBG,MAAhB,CAAuBF,GAAvB,CAAb;AACA,IAAIG,KAAKJ,QAAQ,WAAR,EAAqBE,MAArB,CAAT;AACA,IAAIG,cAAcL,QAAQ,aAAR,CAAlB;;AAOA;AACA,IAAIM,SAASC,iBAAOC,MAAP,EAAb;;AAEAC,gBAAMC,GAAN,CAAUJ,OAAOK,KAAjB,EAAwBC,uBAAxB;;AAEA,IAAIC,eAAe,CAAnB;;AAEA,IAAIC,aAAJ;;AAEA;AACA,IAAIC,MAAM,SAANA,GAAM,GAAW;AACnBC,UAAQC,GAAR,CAAY,YAAZ;AACAH,SAAO,IAAII,IAAJ,EAAP;;AAEA,SAAOC,YAAY,YAAM;AACrB,QAAIC,UAAUP,YAAV,CAAJ,EAA6B;AAC3BO,gBAAUP,YAAV,EAAwBQ,OAAxB,CAAgC,gBAAQ;AACtCZ,wBAAMC,GAAN,CAAUJ,OAAOK,KAAjB,EAAwBW,IAAxB;AACD,OAFD;AAGD;AACDF,cAAUP,YAAV,IAA0BU,SAA1B;;AAEAhB,qBAAOiB,MAAP,CAAclB,MAAd,EAAsBmB,oBAAtB;AACAZ;AACA,QAAIA,eAAe,GAAf,KAAuB,CAA3B,EAA8B;AAC5BG,cAAQC,GAAR,CAAY,+BAAZ,EAA6C,CAAC,IAAIC,IAAJ,KAAaJ,IAAd,IAAsB,IAAnE;AACAA,aAAO,IAAII,IAAJ,EAAP;AACD;AACJ,GAdM,EAcJO,oBAdI,CAAP;AAeD,CAnBD;;AAqBAV;;AAEA;AACA;AACAI,YAAY,YAAM;AAChB,MAAIO,SAASpB,OAAOK,KAAP,CAAae,MAAb,CACVC,MADU,CACH;AAAA,WAAKC,EAAEC,KAAF,KAAY,MAAjB;AAAA,GADG,EAEVC,GAFU,CAEN,gBAAQ;AACX,WAAO;AACLC,UAAIT,KAAKS,EADJ;AAELF,aAAOP,KAAKO,KAFP;AAGLG,SAAGC,KAAKC,KAAL,CAAWZ,KAAKa,QAAL,CAAcH,CAAzB,CAHE;AAILI,SAAGH,KAAKC,KAAL,CAAWZ,KAAKa,QAAL,CAAcC,CAAzB,CAJE;AAKLC,sBAAgBf,KAAKgB;AALhB,KAAP;AAOD,GAVU,CAAb;;AAYAlC,KAAGmC,IAAH,CAAQ,UAAR,EAAoB,EAAEC,OAAO3B,YAAT,EAAuBa,cAAvB,EAApB;AAED,CAfD,EAeGe,6BAfH;;AAkBAC,iBAAOC,EAAP,CAAUrC,MAAV,EAAkB,gBAAlB,EAAoC,UAASsC,KAAT,EAAgB;AAChD,MAAIC,QAAQD,MAAMC,KAAlB;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAAME,MAA1B,EAAkCD,GAAlC,EAAuC;AACnC,QAAIE,OAAOH,MAAMC,CAAN,CAAX;;AAEA,QAAIE,KAAKC,KAAL,CAAWpB,KAAX,KAAqB,KAAzB,EAAgC;AAC9BmB,WAAKC,KAAL,CAAWC,MAAX,CAAkBC,SAAlB,GAA8BH,KAAKI,KAAL,CAAWF,MAAX,CAAkBC,SAAhD;AACD,KAFD,MAEO,IAAIH,KAAKI,KAAL,CAAWvB,KAAX,KAAqB,KAAzB,EAAgC;AACrCmB,WAAKI,KAAL,CAAWF,MAAX,CAAkBC,SAAlB,GAA8BH,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,SAAhD;AACD,KAFM,MAEA,IAAIH,KAAKC,KAAL,CAAWpB,KAAX,KAAqB,QAAzB,EAAmC;AACxCpB,sBAAM4C,MAAN,CAAa/C,OAAOK,KAApB,EAA2BqC,KAAKI,KAAhC;AACD,KAFM,MAEA,IAAIJ,KAAKI,KAAL,CAAWvB,KAAX,KAAqB,QAAzB,EAAmC;AACxCpB,sBAAM4C,MAAN,CAAa/C,OAAOK,KAApB,EAA2BqC,KAAKC,KAAhC;AACD;AACJ;AACJ,CAhBD;;AAmBA,IAAIK,SAASjD,YAAY,IAAZ,EAAkB,EAACkD,WAAW,qBAAZ,EAAlB,EAAsD,UAACC,GAAD,EAAMF,MAAN,EAAiB;AAClFtC,UAAQC,GAAR,CAAYqC,OAAOG,GAAnB;AACD,CAFY,CAAb;;AAIAxD,IAAIyD,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzB5C,UAAQC,GAAR,CAAY4C,YAAY,qBAAxB;AACAD,MAAIE,QAAJ,CAAa/D,KAAKgE,OAAL,CAAaF,YAAY,qBAAzB,CAAb;AACD,CAHD;;AAKA5D,IAAIyD,GAAJ,CAAQ,UAAR,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChCA,MAAIE,QAAJ,CAAa/D,KAAKgE,OAAL,CAAaF,YAAY,kBAAzB,CAAb;AACD,CAFD;;AAIA,IAAIzC,YAAY,EAAhB;;AAIAhB,GAAGuC,EAAH,CAAM,YAAN,EAAoB,UAACqB,MAAD,EAAY;AAC9BhD,UAAQC,GAAR,CAAY,WAAZ,EAAyBJ,YAAzB;AACAmD,SAAOzB,IAAP,CAAY,wBAAZ,EAAsC1B,YAAtC;;AAEAmD,SAAOrB,EAAP,CAAU,UAAV,EAAuB,UAASsB,QAAT,EAAmB;AACxC,QAAIC,OAAO,oBAAaD,SAASjC,CAAtB,EAAyBiC,SAAS7B,CAAlC,CAAX;;AAEA8B,SAAK5C,IAAL,CAAUS,EAAV,GAAekC,SAASlC,EAAxB;;AAEA,QAAIlB,gBAAgBoD,SAASzB,KAA7B,EAAoC;AAClC/B,sBAAMC,GAAN,CAAUJ,OAAOK,KAAjB,EAAwBuD,KAAK5C,IAA7B;AACD,KAFD,MAEO;AACLF,gBAAU6C,SAASzB,KAAnB,IAA4BpB,UAAU6C,SAASzB,KAAnB,KAA6B,EAAzD;AACApB,gBAAU6C,SAASzB,KAAnB,EAA0B2B,IAA1B,CAA+BD,KAAK5C,IAApC;AACD;AACF,GAXD;AAaD,CAjBD;;AAmBAgC,OAAOX,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC5B3B,UAAQC,GAAR,CAAY,kBAAZ;AACD,CAFD;;AAIAf,OAAOkE,MAAP,CAAc,IAAd","file":"server_engine.js","sourcesContent":["var CANVAS_WIDTH = 682\nvar CANVAS_HEIGHT = 660\n\nvar path = require('path');\nlet app = require('express')()\nlet server = require('http').Server(app)\nlet io = require('socket.io')(server)\nlet localtunnel = require('localtunnel')\n\nimport { TIMESTEP, SNAPSHOT_INTERVAL } from './constants/gameEngine.js';\nimport backgroundBodies from './generateWorld';\nimport generateChip from './bodies/Chip';\nimport { Engine, World, Bodies, Body, Events } from 'matter-js';\n\n// create an engine\nvar engine = Engine.create();\n\nWorld.add(engine.world, backgroundBodies)\n\nlet currentFrame = 0;\n\nlet time;\n\n// run the engine\nvar run = function() {\n  console.log('running...')\n  time = new Date()\n\n  return setInterval(() => {\n      if (chipQueue[currentFrame]) {\n        chipQueue[currentFrame].forEach(body => {\n          World.add(engine.world, body)\n        })\n      }\n      chipQueue[currentFrame] = undefined\n\n      Engine.update(engine, TIMESTEP);\n      currentFrame++\n      if (currentFrame % 240 === 0) {\n        console.log(\"Time elapsed for 240 frames: \", (new Date() - time) / 1000)\n        time = new Date()\n      }\n  }, TIMESTEP);\n}\n\nrun()\n\n// I wonder if this setInterval is expensive enough\n// to account for the lost frames?\nsetInterval(() => {\n  var bodies = engine.world.bodies\n    .filter(b => b.label === 'chip')\n    .map(body => {\n      return {\n        id: body.id,\n        label: body.label,\n        x: Math.floor(body.position.x),\n        y: Math.floor(body.position.y),\n        linearVelocity: body.velocity\n      }\n    })\n\n  io.emit('snapshot', { frame: currentFrame, bodies })\n\n}, SNAPSHOT_INTERVAL)\n\n\nEvents.on(engine, 'collisionStart', function(event) {\n    var pairs = event.pairs;\n\n    for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i];\n\n        if (pair.bodyA.label === 'peg') {\n          pair.bodyA.render.fillStyle = pair.bodyB.render.fillStyle;\n        } else if (pair.bodyB.label === 'peg') {\n          pair.bodyB.render.fillStyle = pair.bodyA.render.fillStyle;\n        } else if (pair.bodyA.label === 'ground') {\n          World.remove(engine.world, pair.bodyB)\n        } else if (pair.bodyB.label === 'ground') {\n          World.remove(engine.world, pair.bodyA)\n        }\n    }\n});\n\n\nlet tunnel = localtunnel(3000, {subdomain: 'radioactive-kittens'}, (err, tunnel) => {\n  console.log(tunnel.url)\n})\n\napp.get('/', (req, res) => {\n  console.log(__dirname + '/../dist/index.html')\n  res.sendFile(path.resolve(__dirname + '/../dist/index.html'));\n})\n\napp.get('/main.js', (req, res) => {\n  res.sendFile(path.resolve(__dirname + '/../dist/main.js'))\n})\n\nlet chipQueue = {\n\n}\n\nio.on('connection', (socket) => {\n  console.log(\"Emitted: \", currentFrame)\n  socket.emit('connection established', currentFrame)\n\n  socket.on('new chip' , function(chipInfo) {\n    let chip = generateChip(chipInfo.x, chipInfo.y)\n\n    chip.body.id = chipInfo.id\n\n    if (currentFrame >= chipInfo.frame) {\n      World.add(engine.world, chip.body)\n    } else {\n      chipQueue[chipInfo.frame] = chipQueue[chipInfo.frame] || []\n      chipQueue[chipInfo.frame].push(chip.body)\n    }\n  })\n\n});\n\ntunnel.on('close', function() {\n  console.log('tunnel closed :(')\n});\n\nserver.listen(3000)\n"]}