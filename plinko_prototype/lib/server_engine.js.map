{"version":3,"sources":["../src/server_engine.js"],"names":["process","env","serverEngine","path","require","app","server","Server","io","localtunnel","engine","Engine","create","World","add","world","backgroundBodies","map","b","body","currentFrame","time","run","console","log","Date","setInterval","chipQueue","forEach","undefined","update","TIMESTEP","bodies","filter","label","id","x","Math","floor","position","y","linearVelocity","velocity","emit","frame","SNAPSHOT_INTERVAL","Events","on","event","pairs","i","length","pair","bodyA","render","fillStyle","bodyB","tunnel","subdomain","err","url","get","req","res","__dirname","sendFile","resolve","socket","chipInfo","chip","Chip","push","listen"],"mappings":"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","file":"server_engine.js","sourcesContent":["process.env.serverEngine = true\n\nvar path = require('path');\nlet app = require('express')()\nlet server = require('http').Server(app)\nlet io = require('socket.io')(server)\nlet localtunnel = require('localtunnel')\n\nimport { TIMESTEP, SNAPSHOT_INTERVAL, CANVAS_HEIGHT, CANVAS_WIDTH } from './constants/gameEngine.js';\nimport backgroundBodies from './generateWorld';\nimport Chip from './bodies/Chip';\nimport { Engine, World, Bodies, Body, Events } from 'matter-js';\n\n\n// create an engine\nvar engine = Engine.create();\n\nWorld.add(engine.world, backgroundBodies.map(b => b.body))\n\nlet currentFrame = 0;\n\nlet time;\n\n// run the engine\nvar run = function() {\n  console.log('running...')\n  time = new Date()\n\n  return setInterval(() => {\n      if (chipQueue[currentFrame]) {\n        chipQueue[currentFrame].forEach(body => {\n          World.add(engine.world, body)\n        })\n      }\n      chipQueue[currentFrame] = undefined\n\n      Engine.update(engine, TIMESTEP);\n      currentFrame++\n      if (currentFrame % 240 === 0) {\n        console.log(\"Time elapsed for 240 frames: \", (new Date() - time) / 1000)\n        time = new Date()\n      }\n  }, TIMESTEP);\n}\n\nrun()\n\n// I wonder if this setInterval is expensive enough\n// to account for the lost frames?\nsetInterval(() => {\n  var bodies = engine.world.bodies\n    .filter(b => b.label === 'chip')\n    .map(body => {\n      return {\n        id: body.id,\n        label: body.label,\n        x: Math.floor(body.position.x),\n        y: Math.floor(body.position.y),\n        linearVelocity: body.velocity\n      }\n    })\n\n  io.emit('snapshot', { frame: currentFrame, bodies })\n\n}, SNAPSHOT_INTERVAL)\n\n\nEvents.on(engine, 'collisionStart', function(event) {\n    var pairs = event.pairs;\n\n    for (var i = 0; i < pairs.length; i++) {\n        var pair = pairs[i];\n\n        if (pair.bodyA.label === 'peg') {\n          pair.bodyA.render.fillStyle = pair.bodyB.render.fillStyle;\n        } else if (pair.bodyB.label === 'peg') {\n          pair.bodyB.render.fillStyle = pair.bodyA.render.fillStyle;\n        } else if (pair.bodyA.label === 'ground') {\n          // World.remove(engine.world, pair.bodyB)\n        } else if (pair.bodyB.label === 'ground') {\n          // World.remove(engine.world, pair.bodyA)\n        }\n    }\n});\n\n\nlet tunnel = localtunnel(3000, {subdomain: 'radioactive-kittens'}, (err, tunnel) => {\n  console.log(tunnel.url)\n})\n\napp.get('/', (req, res) => {\n  console.log(__dirname + '/../dist/index.html')\n  res.sendFile(path.resolve(__dirname + '/../dist/index.html'));\n})\n\napp.get('/main.js', (req, res) => {\n  res.sendFile(path.resolve(__dirname + '/../dist/main.js'))\n})\n\nlet chipQueue = {\n\n}\n\nio.on('connection', (socket) => {\n  console.log(\"Emitted: \", currentFrame)\n  socket.emit('connection established', currentFrame)\n\n  socket.on('new chip' , function(chipInfo) {\n    let chip = new Chip(chipInfo)\n\n    chip.body.id = chipInfo.id\n\n    if (currentFrame >= chipInfo.frame) {\n      World.add(engine.world, chip.body)\n    } else {\n      chipQueue[chipInfo.frame] = chipQueue[chipInfo.frame] || []\n      chipQueue[chipInfo.frame].push(chip.body)\n    }\n  })\n\n});\n\ntunnel.on('close', function() {\n  console.log('tunnel closed :(')\n});\n\nserver.listen(3000)\n"]}