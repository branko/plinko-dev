{"version":3,"sources":["../src/generateWorld.js"],"names":["backgroundBodies","row","ROWS","col","COLS","rowSpace","SPACING","colSpace","peg","Peg","x","y","push","i","wall","Wall","CANVAS_HEIGHT","width","height","leftWall","rightWall","CANVAS_WIDTH","ground","Ground","Body","setAngle","body"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;AAEA;AACA,IAAMA,mBAAmB,EAAzB;;AAEA;AACA,KAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAMC,YAAxB,EAA8BD,KAA9B,EAAqC;AACnC,OAAK,IAAIE,MAAM,CAAf,EAAkBA,MAAMC,eAAO,CAA/B,EAAkCD,KAAlC,EAAyC;AACvC,QAAIE,WAAWF,MAAMG,eAArB;AACA,QAAIL,MAAM,CAAN,IAAW,CAAf,EAAkB;AAChBI,kBAAYC,kBAAU,CAAtB;AACD;AACD,QAAIC,WAAWD,kBAAUL,MAAMK,eAA/B;AACA,QAAIE,MAAM,IAAIC,aAAJ,CAAQ,EAAEC,GAAGL,QAAL,EAAeM,GAAGJ,QAAlB,EAAR,CAAV;AACAP,qBAAiBY,IAAjB,CAAsBJ,GAAtB;AACD;AACF;;AAED;AACA,KAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIT,YAApB,EAA0BS,GAA1B,EAA+B;AAC7B,MAAIC,OAAO,IAAIC,UAAJ,CAAS,EAAEL,GAAGJ,kBAAUO,CAAf,EAAkBF,GAAGK,wBAAgB,EAArC,EAAyCC,OAAO,CAAhD,EAAmDC,QAAQ,GAA3D,EAAT,CAAX;AACAlB,mBAAiBY,IAAjB,CAAsBE,IAAtB;AACD;;AAED;AACA,IAAMK,WAAW,IAAIJ,UAAJ,CAAS,EAACL,GAAG,CAAJ,EAAOC,GAAGK,wBAAgB,CAA1B,EAA6BC,OAAO,CAApC,EAAuCC,QAAQF,qBAA/C,EAAT,CAAjB;AACA,IAAMI,YAAY,IAAIL,UAAJ,CAAS,EAACL,GAAGW,oBAAJ,EAAkBV,GAAEK,wBAAgB,CAApC,EAAuCC,OAAO,CAA9C,EAAiDC,QAAQF,qBAAzD,EAAT,CAAlB;;AAEAhB,iBAAiBY,IAAjB,CAAsBO,QAAtB;AACAnB,iBAAiBY,IAAjB,CAAsBQ,SAAtB;;AAEA;AACA,IAAME,SAAS,IAAIC,YAAJ,EAAf;AACAC,eAAKC,QAAL,CAAcH,OAAOI,IAArB,EAA2B,EAA3B;AACA1B,iBAAiBY,IAAjB,CAAsBU,MAAtB;;kBAEetB,gB","file":"generateWorld.js","sourcesContent":["import { Body, Bodies, World } from 'matter-js';\nimport Peg from './bodies/Peg';\nimport { Wall, Ground } from './bodies/Wall';\nimport { CANVAS_WIDTH, CANVAS_HEIGHT, SPACING, ROWS, COLS } from './constants/canvas';\n\n// Array to hold bodies to add to world later\nconst backgroundBodies = []\n\n// Generate pegs\nfor (var row = 0; row < ROWS; row++) {\n  for (var col = 0; col < COLS + 1; col++) {\n    var rowSpace = col * SPACING;\n    if (row % 2 == 0) {\n      rowSpace += SPACING / 2;\n    }\n    var colSpace = SPACING + row * SPACING;\n    var peg = new Peg({ x: rowSpace, y: colSpace});\n    backgroundBodies.push(peg)\n  }\n}\n\n// Generate bucket walls\nfor (var i = 1; i < COLS; i++) {\n  let wall = new Wall({ x: SPACING * i, y: CANVAS_HEIGHT - 80, width: 5, height: 200});\n  backgroundBodies.push(wall)\n}\n\n// Generate left and right walls\nconst leftWall = new Wall({x: 0, y: CANVAS_HEIGHT / 2, width: 5, height: CANVAS_HEIGHT});\nconst rightWall = new Wall({x: CANVAS_WIDTH, y:CANVAS_HEIGHT / 2, width: 5, height: CANVAS_HEIGHT});\n\nbackgroundBodies.push(leftWall)\nbackgroundBodies.push(rightWall)\n\n// Generate ground\nconst ground = new Ground();\nBody.setAngle(ground.body, 90)\nbackgroundBodies.push(ground)\n\nexport default backgroundBodies\n"]}