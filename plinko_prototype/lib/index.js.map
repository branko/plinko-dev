{"version":3,"sources":["../src/index.js"],"names":["io","World","engine","generateChip","Peg","socket","connect","on","data","console","log","currentBodies","bodies","forEach","body","id","label","peg","x","y","add","world","chip","position","document","addEventListener","e","canvas","querySelector","stopPropagation","yCoordinate","Math","min","clientY","emit","clientX"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;;AAEA,IAAIC,SAASL,GAAGM,OAAH,CAAW,4CAAX,CAAb;;AAEAD,OAAOE,EAAP,CAAU,wBAAV,EAAqCC,IAAD,IAAU;AAC5CC,UAAQC,GAAR,CAAY,cAAZ;AACD,CAFD;;AAIA,IAAIC,gBAAgB,EAApB;;AAEAN,OAAOE,EAAP,CAAU,UAAV,EAAuBK,MAAD,IAAY;AAChCA,SAAOC,OAAP,CAAeC,QAAQ;;AAErB,QAAI,CAACH,cAAcG,KAAKC,EAAnB,CAAL,EAA6B;AAC3B,UAAID,KAAKE,KAAL,KAAe,KAAnB,EAA0B;AACxB,cAAMC,MAAM,IAAIb,GAAJ,CAAQU,KAAKI,CAAb,EAAgBJ,KAAKK,CAArB,CAAZ;AACAR,sBAAcG,KAAKC,EAAnB,IAAyBE,GAAzB;AACAhB,cAAMmB,GAAN,CAAUlB,OAAOmB,KAAjB,EAAwBJ,GAAxB;AACD,OAJD,MAIO,IAAIH,KAAKE,KAAL,KAAe,MAAnB,EAA2B;AAChC,cAAMM,OAAOnB,aAAaW,KAAKI,CAAlB,EAAqBJ,KAAKK,CAA1B,CAAb;AACAR,sBAAcG,KAAKC,EAAnB,IAAyBO,IAAzB;AACArB,cAAMmB,GAAN,CAAUlB,OAAOmB,KAAjB,EAAwBJ,GAAxB;AACD;AACF,KAVD,MAUO;AACLN,oBAAcG,KAAKC,EAAnB,EAAuBD,IAAvB,CAA4BS,QAA5B,CAAqCL,CAArC,GAAyCJ,KAAKI,CAA9C;AACAP,oBAAcG,KAAKC,EAAnB,EAAuBD,IAAvB,CAA4BS,QAA5B,CAAqCJ,CAArC,GAAyCL,KAAKK,CAA9C;AACD;AACF,GAhBD;AAiBD,CAlBD;;AAoBAK,SAASC,gBAAT,CAA0B,kBAA1B,EAA8C,UAASC,CAAT,EAAY;AACxD,MAAIC,SAASH,SAASI,aAAT,CAAuB,QAAvB,CAAb;;AAEAD,SAAOF,gBAAP,CAAwB,OAAxB,EAAiC,UAASC,CAAT,EAAY;AAC3CA,MAAEG,eAAF;AACA,UAAMC,cAAcC,KAAKC,GAAL,CAASN,EAAEO,OAAX,EAAoB,GAApB,CAApB;;AAEA5B,WAAO6B,IAAP,CAAY,UAAZ,EAAwB,EAAEhB,GAAGQ,EAAES,OAAP,EAAgBhB,GAAGW,WAAnB,EAAxB;AACD,GALD;AAMD,CATD","file":"index.js","sourcesContent":["import io from 'socket.io-client';\nimport { World } from 'matter-js';\nimport engine from './engine';\nimport generateChip from './bodies/Chip';\nimport { Peg } from './bodies/Peg'\n\nvar socket = io.connect('http://radioactive-kittens.localtunnel.me/');\n\nsocket.on('connection established', (data) => {\n  console.log('ESTABLISHED!')\n})\n\nvar currentBodies = {}\n\nsocket.on('snapshot', (bodies) => {\n  bodies.forEach(body => {\n\n    if (!currentBodies[body.id]) {\n      if (body.label === 'peg') {\n        const peg = new Peg(body.x, body.y)\n        currentBodies[body.id] = peg\n        World.add(engine.world, peg)\n      } else if (body.label === 'chip') {\n        const chip = generateChip(body.x, body.y)\n        currentBodies[body.id] = chip\n        World.add(engine.world, peg)\n      }\n    } else {\n      currentBodies[body.id].body.position.x = body.x;\n      currentBodies[body.id].body.position.y = body.y;\n    }\n  })\n})\n\ndocument.addEventListener('DOMContentLoaded', function(e) {\n  var canvas = document.querySelector('canvas')\n\n  canvas.addEventListener('click', function(e) {\n    e.stopPropagation()\n    const yCoordinate = Math.min(e.clientY, 200)\n\n    socket.emit('new chip', { x: e.clientX, y: yCoordinate })\n  })\n})\n"]}